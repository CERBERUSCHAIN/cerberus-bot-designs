import React, { useState } from 'react';
import { 
  BarChart2, Zap, Eye, ArrowUpDown, Play, Pause,
  Settings, Clock, Info, AlertTriangle, Check, X,
  RefreshCw, PlusCircle, Sliders, ChevronDown, 
  Shield, Target, Rocket, Server, Activity
} from 'lucide-react';

const TradingBotsTab = () => {
  const [activeBot, setActiveBot] = useState('volume');
  const [botStatuses, setBotStatuses] = useState({
    volume: true,
    bundle: true,
    sniper: false,
    bump: false
  });
  
  const toggleBotStatus = (bot) => {
    setBotStatuses({
      ...botStatuses,
      [bot]: !botStatuses[bot]
    });
  };
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-white">Trading Bots</h1>
        <div className="flex space-x-2">
          <button className="flex items-center px-3 py-1.5 bg-zinc-900 rounded border border-zinc-800 text-zinc-300 text-sm">
            <RefreshCw size={14} className="mr-2" />
            Refresh Status
          </button>
          <button className="flex items-center px-3 py-1.5 bg-gradient-to-r from-purple-600 to-pink-600 rounded text-white text-sm shadow-[0_0_10px_rgba(168,85,247,0.5)]">
            <PlusCircle size={14} className="mr-2" />
            New Strategy
          </button>
        </div>
      </div>
      
      {/* Bot Navigation Tabs */}
      <div className="bg-zinc-950 p-4 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] mb-6">
        <div className="flex space-x-4">
          <BotTab 
            name="Volume Bot" 
            description="Trades on volume spikes"
            icon={<BarChart2 size={20} />}
            color="purple"
            active={activeBot === 'volume'}
            isRunning={botStatuses.volume}
            onClick={() => setActiveBot('volume')}
          />
          <BotTab 
            name="Bundle Bot" 
            description="DEX arbitrage trading"
            icon={<Zap size={20} />}
            color="pink"
            active={activeBot === 'bundle'}
            isRunning={botStatuses.bundle}
            onClick={() => setActiveBot('bundle')}
          />
          <BotTab 
            name="Sniper Bot" 
            description="Finds new tokens"
            icon={<Eye size={20} />}
            color="blue"
            active={activeBot === 'sniper'}
            isRunning={botStatuses.sniper}
            onClick={() => setActiveBot('sniper')}
          />
          <BotTab 
            name="Bump Bot" 
            description="Optimizes transactions"
            icon={<ArrowUpDown size={20} />}
            color="cyan"
            active={activeBot === 'bump'}
            isRunning={botStatuses.bump}
            onClick={() => setActiveBot('bump')}
          />
        </div>
      </div>
      
      {/* Main Content Area */}
      <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
        <div className="border-b border-purple-900/30 p-4 flex items-center justify-between">
          <div className="flex items-center">
            {activeBot === 'volume' && <BarChart2 size={18} className="text-purple-400 mr-2" />}
            {activeBot === 'bundle' && <Zap size={18} className="text-pink-400 mr-2" />}
            {activeBot === 'sniper' && <Eye size={18} className="text-blue-400 mr-2" />}
            {activeBot === 'bump' && <ArrowUpDown size={18} className="text-cyan-400 mr-2" />}
            <h2 className="text-lg font-medium text-white">
              {activeBot === 'volume' && 'Volume Bot'}
              {activeBot === 'bundle' && 'Bundle Bot'}
              {activeBot === 'sniper' && 'Sniper Bot'}
              {activeBot === 'bump' && 'Bump Bot'}
            </h2>
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="flex items-center">
              <div className={`w-2 h-2 rounded-full mr-2 ${botStatuses[activeBot] ? 'bg-green-500' : 'bg-red-500'}`}></div>
              <span className="text-sm text-zinc-300">{botStatuses[activeBot] ? 'Active' : 'Inactive'}</span>
            </div>
            <button 
              className={`flex items-center px-4 py-2 rounded text-white text-sm ${
                botStatuses[activeBot] 
                  ? 'bg-gradient-to-r from-red-600 to-orange-600 shadow-[0_0_10px_rgba(239,68,68,0.5)]' 
                  : 'bg-gradient-to-r from-green-600 to-emerald-600 shadow-[0_0_10px_rgba(16,185,129,0.5)]'
              }`}
              onClick={() => toggleBotStatus(activeBot)}
            >
              {botStatuses[activeBot] ? (
                <>
                  <Pause size={16} className="mr-2" />
                  Stop Bot
                </>
              ) : (
                <>
                  <Play size={16} className="mr-2" />
                  Start Bot
                </>
              )}
            </button>
            <button className="flex items-center px-3 py-1.5 bg-zinc-900 rounded border border-zinc-800 text-zinc-300 text-sm">
              <Settings size={14} className="mr-2" />
              Configure
            </button>
          </div>
        </div>
        
        <div className="p-6">
          {activeBot === 'volume' && <VolumeBotContent isRunning={botStatuses.volume} />}
          {activeBot === 'bundle' && <BundleBotContent isRunning={botStatuses.bundle} />}
          {activeBot === 'sniper' && <SniperBotContent isRunning={botStatuses.sniper} />}
          {activeBot === 'bump' && <BumpBotContent isRunning={botStatuses.bump} />}
        </div>
      </div>
    </div>
  );
};

// Bot Tab Component
const BotTab = ({ name, description, icon, color, active, isRunning, onClick }) => {
  let gradientColors, borderColor;
  
  switch (color) {
    case 'purple':
      gradientColors = 'from-purple-600 to-fuchsia-600';
      borderColor = 'border-purple-700';
      break;
    case 'pink':
      gradientColors = 'from-pink-600 to-rose-600';
      borderColor = 'border-pink-700';
      break;
    case 'blue':
      gradientColors = 'from-blue-600 to-cyan-600';
      borderColor = 'border-blue-700';
      break;
    case 'cyan':
      gradientColors = 'from-cyan-600 to-blue-600';
      borderColor = 'border-cyan-700';
      break;
    default:
      gradientColors = 'from-purple-600 to-fuchsia-600';
      borderColor = 'border-purple-700';
  }

  return (
    <div 
      className={`flex-1 p-4 rounded-lg cursor-pointer transition-all ${
        active 
          ? `bg-gradient-to-r ${gradientColors} shadow-[0_0_15px_rgba(168,85,247,0.5)]` 
          : 'bg-zinc-900 hover:bg-zinc-800'
      }`}
      onClick={onClick}
    >
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center">
          <div className={`w-10 h-10 rounded-lg ${
            active 
              ? 'bg-white/10' 
              : `bg-gradient-to-r ${gradientColors}`
          } flex items-center justify-center mr-3 ${
            !active ? 'shadow-[0_0_10px_rgba(168,85,247,0.3)]' : ''
          }`}>
            {icon}
          </div>
          <div>
            <div className="font-medium text-white">{name}</div>
            <div className="text-xs text-zinc-400">{description}</div>
          </div>
        </div>
        <div className={`px-2 py-0.5 rounded text-xs ${
          isRunning 
            ? 'bg-green-900/30 text-green-400' 
            : 'bg-red-900/30 text-red-400'
        }`}>
          {isRunning ? 'Active' : 'Inactive'}
        </div>
      </div>
      
      {active && (
        <div className="mt-3 pt-3 border-t border-white/10 flex justify-between items-center">
          <div className="flex space-x-2">
            <StatBadge label="Trades" value="24h" count="14" />
            <StatBadge label="Profit" value="24h" count="+0.28 SOL" />
          </div>
          <button className="text-xs text-white/70 hover:text-white px-2 py-1 bg-white/5 rounded">
            View History
          </button>
        </div>
      )}
    </div>
  );
};

// Stat Badge Component
const StatBadge = ({ label, value, count }) => {
  return (
    <div className="px-2 py-1 bg-black/20 rounded text-xs">
      <div className="text-white/70">{label} ({value})</div>
      <div className="text-white font-medium">{count}</div>
    </div>
  );
};

// Volume Bot Content Component
const VolumeBotContent = ({ isRunning }) => {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-4 gap-4">
        <BotSettingsCard
          title="Threshold"
          value="50%"
          description="Volume increase detection threshold"
          icon={<Activity />}
          color="purple"
        />
        <BotSettingsCard
          title="Timeframe"
          value="30 min"
          description="Volume analysis timeframe"
          icon={<Clock />}
          color="purple"
        />
        <BotSettingsCard
          title="Trade Size"
          value="0.5 SOL"
          description="Maximum trade amount per transaction"
          icon={<Sliders />}
          color="purple"
        />
        <BotSettingsCard
          title="Protection"
          value="Enabled"
          description="Anti-rug pull protection active"
          icon={<Shield />}
          color="purple"
        />
      </div>
      
      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 bg-zinc-900/50 rounded-lg p-4 border border-purple-900/20">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-medium">Volume Analysis</h3>
            <div className="flex space-x-2">
              <button className="px-2 py-0.5 text-xs bg-zinc-800 rounded text-zinc-400">1h</button>
              <button className="px-2 py-0.5 text-xs bg-purple-900/50 rounded text-purple-300">6h</button>
              <button className="px-2 py-0.5 text-xs bg-zinc-800 rounded text-zinc-400">24h</button>
            </div>
          </div>
          
          <div className="h-64 relative">
            {/* Simple volume chart visualization */}
            <div className="absolute inset-0">
              {/* Background grid lines */}
              <div className="absolute inset-0 flex flex-col justify-between">
                <div className="w-full h-px bg-zinc-800"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800"></div>
              </div>
              
              {/* Volume bars */}
              <div className="absolute bottom-0 inset-x-0 flex items-end justify-between px-2 h-full">
                <VolumeBar height="30%" color="normal" />
                <VolumeBar height="45%" color="normal" />
                <VolumeBar height="25%" color="normal" />
                <VolumeBar height="60%" color="normal" />
                <VolumeBar height="40%" color="normal" />
                <VolumeBar height="20%" color="normal" />
                <VolumeBar height="30%" color="normal" />
                <VolumeBar height="70%" color="spike" label="Detected" />
                <VolumeBar height="85%" color="spike" label="Buy" />
                <VolumeBar height="55%" color="normal" />
                <VolumeBar height="45%" color="normal" />
                <VolumeBar height="35%" color="normal" />
              </div>
              
              {/* Threshold line */}
              <div className="absolute left-0 right-0 top-1/2 border-t border-dashed border-purple-500/50"></div>
              
              {/* Threshold label */}
              <div className="absolute right-0 top-1/2 -mt-3 px-2 py-0.5 bg-purple-900/80 text-purple-300 text-xs rounded-l">
                50% Threshold
              </div>
              
              {/* Time axis */}
              <div className="absolute left-0 right-0 bottom-0 border-t border-zinc-800 pt-1 flex justify-between px-2">
                <div className="text-xs text-zinc-500">12:00</div>
                <div className="text-xs text-zinc-500">13:00</div>
                <div className="text-xs text-zinc-500">14:00</div>
                <div className="text-xs text-zinc-500">15:00</div>
                <div className="text-xs text-zinc-500">16:00</div>
                <div className="text-xs text-zinc-500">17:00</div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-zinc-900/50 rounded-lg p-4 border border-purple-900/20">
          <h3 className="text-white font-medium mb-4">Bot Activity</h3>
          
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {isRunning ? (
              <>
                <ActivityLogItem
                  time="14:32:05"
                  message="Volume spike detected on CBRS/SOL"
                  type="info"
                />
                <ActivityLogItem
                  time="14:32:08"
                  message="Executing BUY order: 1000 CBRS"
                  type="success"
                />
                <ActivityLogItem
                  time="14:15:30"
                  message="Monitoring volume patterns..."
                  type="normal"
                />
                <ActivityLogItem
                  time="13:45:12"
                  message="Potential rug pull detected. Order cancelled."
                  type="warning"
                />
                <ActivityLogItem
                  time="13:30:05"
                  message="Bot started"
                  type="info"
                />
              </>
            ) : (
              <div className="flex flex-col items-center justify-center h-28 text-zinc-500">
                <Activity size={24} className="mb-2 opacity-50" />
                <p className="text-sm">Bot is currently inactive</p>
                <p className="text-xs mt-1">Start the bot to see activity</p>
              </div>
            )}
          </div>
          
          {isRunning && (
            <div className="mt-4 pt-3 border-t border-zinc-800">
              <div className="flex justify-between items-center">
                <div>
                  <div className="text-xs text-zinc-400">Current Session Profit</div>
                  <div className="text-lg font-medium text-green-400">+0.125 SOL</div>
                </div>
                <button className="px-2 py-1 bg-zinc-800 rounded text-xs text-zinc-300">
                  View Details
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-zinc-900/50 rounded-lg p-4 border border-purple-900/20">
        <h3 className="text-white font-medium mb-4">Volume Bot Settings</h3>
        
        <div className="grid grid-cols-2 gap-x-6 gap-y-4">
          <div>
            <div className="flex justify-between mb-2">
              <label className="text-sm text-purple-300">Volume Threshold (%)</label>
              <span className="text-sm text-white">50%</span>
            </div>
            <div className="h-2 bg-zinc-800 rounded-full overflow-hidden">
              <div className="h-full bg-gradient-to-r from-purple-500 to-fuchsia-500 rounded-full" style={{ width: '50%' }}></div>
            </div>
            <div className="flex justify-between mt-1 text-xs text-zinc-500">
              <span>10%</span>
              <span>100%</span>
            </div>
          </div>
          
          <div>
            <div className="flex justify-between mb-2">
              <label className="text-sm text-purple-300">Time Window (minutes)</label>
              <span className="text-sm text-white">30 min</span>
            </div>
            <div className="h-2 bg-zinc-800 rounded-full overflow-hidden">
              <div className="h-full bg-gradient-to-r from-purple-500 to-fuchsia-500 rounded-full" style={{ width: '50%' }}></div>
            </div>
            <div className="flex justify-between mt-1 text-xs text-zinc-500">
              <span>5 min</span>
              <span>60 min</span>
            </div>
          </div>
          
          <div>
            <div className="flex justify-between mb-2">
              <label className="text-sm text-purple-300">Maximum Trade Size (SOL)</label>
              <span className="text-sm text-white">0.5 SOL</span>
            </div>
            <input
              type="text"
              defaultValue="0.5"
              className="w-full bg-zinc-900 border border-purple-900/50 rounded px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 shadow-[0_0_5px_rgba(168,85,247,0.25)]"
            />
          </div>
          
          <div>
            <div className="flex justify-between mb-2">
              <label className="text-sm text-purple-300">Target Profit (%)</label>
              <span className="text-sm text-white">15%</span>
            </div>
            <input
              type="text"
              defaultValue="15"
              className="w-full bg-zinc-900 border border-purple-900/50 rounded px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500 shadow-[0_0_5px_rgba(168,85,247,0.25)]"
            />
          </div>
          
          <div className="flex items-center">
            <div className="w-5 h-5 rounded relative">
              <input
                type="checkbox"
                id="rugpull"
                className="sr-only"
                defaultChecked
              />
              <div className="block h-5 w-5 rounded border border-purple-500 bg-zinc-900"></div>
              <div className="absolute left-0.5 top-0.5 h-4 w-4 rounded bg-gradient-to-r from-purple-500 to-fuchsia-500 shadow-[0_0_5px_rgba(168,85,247,0.5)]"></div>
            </div>
            <label htmlFor="rugpull" className="text-sm text-purple-300 ml-2">
              Enable rug pull protection
            </label>
          </div>
          
          <div className="flex items-center">
            <div className="w-5 h-5 rounded relative">
              <input
                type="checkbox"
                id="autosell"
                className="sr-only"
                defaultChecked
              />
              <div className="block h-5 w-5 rounded border border-purple-500 bg-zinc-900"></div>
              <div className="absolute left-0.5 top-0.5 h-4 w-4 rounded bg-gradient-to-r from-purple-500 to-fuchsia-500 shadow-[0_0_5px_rgba(168,85,247,0.5)]"></div>
            </div>
            <label htmlFor="autosell" className="text-sm text-purple-300 ml-2">
              Auto-sell on profit target (15%)
            </label>
          </div>
        </div>
        
        <div className="mt-6 flex justify-end">
          <button className="flex items-center px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded text-white text-sm shadow-[0_0_10px_rgba(168,85,247,0.5)] hover:shadow-[0_0_15px_rgba(168,85,247,0.7)] transition-shadow">
            <Settings size={16} className="mr-2" />
            Save Settings
          </button>
        </div>
      </div>
      
      <div className="bg-purple-900/20 rounded-md p-3 border border-purple-900/30">
        <div className="flex">
          <Info size={16} className="text-purple-400 mt-0.5 mr-2 flex-shrink-0" />
          <div className="text-xs text-purple-300">
            The Volume Bot monitors token trading volumes and detects unusual spikes that may indicate bullish momentum. When volume increases beyond the threshold within the specified timeframe, the bot automatically executes buy orders. The anti-rug pull protection helps prevent losses from malicious token activity.
          </div>
        </div>
      </div>
    </div>
  );
};

// Bundle Bot Content Component
const BundleBotContent = ({ isRunning }) => {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-4 gap-4">
        <BotSettingsCard
          title="Profit Threshold"
          value="0.8%"
          description="Minimum profit for arbitrage"
          icon={<Target />}
          color="pink"
        />
        <BotSettingsCard
          title="Slippage"
          value="0.2%"
          description="Maximum allowed slippage"
          icon={<Sliders />}
          color="pink"
        />
        <BotSettingsCard
          title="DEX Routing"
          value="3 DEXs"
          description="Raydium, Jupiter, Orca"
          icon={<Rocket />}
          color="pink"
        />
        <BotSettingsCard
          title="Priority Fee"
          value="Enabled"
          description="Faster transaction execution"
          icon={<Zap />}
          color="pink"
        />
      </div>
      
      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 bg-zinc-900/50 rounded-lg p-4 border border-pink-900/20">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-medium">DEX Price Comparison</h3>
            <div className="flex space-x-2">
              <button className="px-2 py-0.5 text-xs bg-zinc-800 rounded text-zinc-400">1m</button>
              <button className="px-2 py-0.5 text-xs bg-pink-900/50 rounded text-pink-300">5m</button>
              <button className="px-2 py-0.5 text-xs bg-zinc-800 rounded text-zinc-400">15m</button>
            </div>
          </div>
          
          <div className="h-64 p-4 bg-zinc-900/30 rounded border border-zinc-800/50 space-y-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center mr-2 shadow-[0_0_5px_rgba(16,185,129,0.5)]">
                  R
                </div>
                <div>
                  <div className="text-sm font-medium text-white">Raydium</div>
                  <div className="text-xs text-zinc-400">CBRS/SOL</div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium text-white">0.00124 SOL</div>
                <div className="text-xs text-zinc-400">Per CBRS</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center mr-2 shadow-[0_0_5px_rgba(59,130,246,0.5)]">
                  J
                </div>
                <div>
                  <div className="text-sm font-medium text-white">Jupiter</div>
                  <div className="text-xs text-zinc-400">CBRS/SOL</div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium text-white">0.00125 SOL</div>
                <div className="text-xs text-green-400">+0.8% diff</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 flex items-center justify-center mr-2 shadow-[0_0_5px_rgba(249,115,22,0.5)]">
                  O
                </div>
                <div>
                  <div className="text-sm font-medium text-white">Orca</div>
                  <div className="text-xs text-zinc-400">CBRS/SOL</div>
                </div>
              </div>
              <div className="text-right">
                <div className="text-sm font-medium text-white">0.00123 SOL</div>
                <div className="text-xs text-red-400">-0.8% diff</div>
              </div>
            </div>
            
            <div className="pt-4 mt-4 border-t border-zinc-800">
              <div className="p-3 bg-gradient-to-r from-pink-900/20 to-purple-900/10 rounded border border-pink-900/30 flex items-center justify-between">
                <div className="flex items-center">
                  <Zap size={16} className="text-pink-400 mr-2" />
                  <div className="text-sm text-white">Arbitrage Opportunity</div>
                </div>
                <div className="text-right">
                  <div className="text-sm font-medium text-green-400">+0.8% Profit</div>
                  <div className="text-xs text-zinc-400">Raydium → Jupiter</div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-zinc-900/50 rounded-lg p-4 border border-pink-900/20">
          <h3 className="text-white font-medium mb-4">Bot Activity</h3>
          
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {isRunning ? (
              <>
                <ActivityLogItem
                  time="14:28:15"
                  message="Arbitrage executed: Raydium → Jupiter"
                  type="success"
                />
                <ActivityLogItem
                  time="14:28:12"
                  message="Arbitrage opportunity detected (0.8%)"
                  type="info"
                />
                <ActivityLogItem
                  time="14:15:30"
                  message="Scanning DEX prices..."
                  type="normal"
                />
                <ActivityLogItem
                  time="14:05:22"
                  message="Insufficient profit: 0.3% (below 0.8%)"
                  type="warning"
                />
                <ActivityLogItem
                  time="13:30:05"
                  message="Bot started"
                  type="info"
                />
              </>
            ) : (
              <div className="flex flex-col items-center justify-center h-28 text-zinc-500">
                <Zap size={24} className="mb-2 opacity-50" />
                <p className="text-sm">Bot is currently inactive</p>
                <p className="text-xs mt-1">Start the bot to see activity</p>
              </div>
            )}
          </div>
          
          {isRunning && (
            <div className="mt-4 pt-3 border-t border-zinc-800">
              <div className="flex justify-between items-center">
                <div>
                  <div className="text-xs text-zinc-400">Current Session Profit</div>
                  <div className="text-lg font-medium text-green-400">+0.082 SOL</div>
                </div>
                <button className="px-2 py-1 bg-zinc-800 rounded text-xs text-zinc-300">
                  View Details
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-pink-900/20 rounded-md p-3 border border-pink-900/30">
        <div className="flex">
          <Info size={16} className="text-pink-400 mt-0.5 mr-2 flex-shrink-0" />
          <div className="text-xs text-pink-300">
            The Bundle Bot continuously monitors price differences across decentralized exchanges to find arbitrage opportunities. When a price gap exceeds your profit threshold, the bot automatically executes trades to capture the difference. Priority fees ensure your transactions are processed quickly to maximize successful arbitrage.
          </div>
        </div>
      </div>
    </div>
  );
};

// Sniper Bot Content Component
const SniperBotContent = ({ isRunning }) => {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-4 gap-4">
        <BotSettingsCard
          title="Quality Threshold"
          value="65%"
          description="Token quality score minimum"
          icon={<Target />}
          color="blue"
        />
        <BotSettingsCard
          title="Initial Buy"
          value="0.1 SOL"
          description="First purchase amount"
          icon={<Sliders />}
          color="blue"
        />
        <BotSettingsCard
          title="Monitoring"
          value="Active"
          description="Tracking new listings"
          icon={<Eye />}
          color="blue"
        />
        <BotSettingsCard
          title="Protection"
          value="Enabled"
          description="Auto-sell on suspicious activity"
          icon={<Shield />}
          color="blue"
        />
      </div>
      
      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 bg-zinc-900/50 rounded-lg p-4 border border-blue-900/20">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-medium">Recent Token Listings</h3>
            <div className="flex items-center">
              <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse mr-2"></div>
              <span className="text-xs text-zinc-400">Scanning for new tokens...</span>
            </div>
          </div>
          
          <div className="space-y-2 max-h-64 overflow-y-auto">
            <TokenListingRow
              name="MoonPepe"
              symbol="MPEPE"
              score={72}
              time="14:28:15"
              status="purchased"
              initialPrice="0.00000035"
            />
            <TokenListingRow
              name="BonkChad"
              symbol="BCHAD"
              score={68}
              time="13:45:22"
              status="purchased"
              initialPrice="0.00000089"
            />
            <TokenListingRow
              name="SolKitty"
              symbol="KITTY"
              score={45}
              time="12:32:10"
              status="rejected"
              initialPrice="0.00000012"
            />
            <TokenListingRow
              name="DogeSol"
              symbol="DGSOL"
              score={75}
              time="10:15:30"
              status="purchased"
              initialPrice="0.00000105"
            />
            <TokenListingRow
              name="RocketFinance"
              symbol="RCKT"
              score={38}
              time="09:22:45"
              status="rejected"
              initialPrice="0.00000022"
            />
          </div>
        </div>
        
        <div className="bg-zinc-900/50 rounded-lg p-4 border border-blue-900/20">
          <h3 className="text-white font-medium mb-4">Bot Activity</h3>
          
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {isRunning ? (
              <>
                <ActivityLogItem
                  time="14:28:15"
                  message="Purchased MPEPE: 0.1 SOL"
                  type="success"
                />
                <ActivityLogItem
                  time="14:28:10"
                  message="New token detected: MoonPepe (MPEPE)"
                  type="info"
                />
                <ActivityLogItem
                  time="14:15:30"
                  message="Scanning for new tokens..."
                  type="normal"
                />
                <ActivityLogItem
                  time="13:45:25"
                  message="Purchased BCHAD: 0.1 SOL"
                  type="success"
                />
                <ActivityLogItem
                  time="13:45:22"
                  message="New token detected: BonkChad (BCHAD)"
                  type="info"
                />
              </>
            ) : (
              <div className="flex flex-col items-center justify-center h-28 text-zinc-500">
                <Eye size={24} className="mb-2 opacity-50" />
                <p className="text-sm">Bot is currently inactive</p>
                <p className="text-xs mt-1">Start the bot to see activity</p>
              </div>
            )}
          </div>
          
          {isRunning && (
            <div className="mt-4 pt-3 border-t border-zinc-800">
              <div className="flex justify-between items-center">
                <div>
                  <div className="text-xs text-zinc-400">Quality Scores</div>
                  <div className="mt-1">
                    <div className="text-xs flex items-center text-green-400 mb-1">
                      <div className="w-2 h-2 rounded-full bg-green-500 mr-1"></div>
                      High (70-100): 2 tokens
                    </div>
                    <div className="text-xs flex items-center text-yellow-400 mb-1">
                      <div className="w-2 h-2 rounded-full bg-yellow-500 mr-1"></div>
                      Medium (50-69): 1 token
                    </div>
                    <div className="text-xs flex items-center text-red-400">
                      <div className="w-2 h-2 rounded-full bg-red-500 mr-1"></div>
                      Low (0-49): 2 tokens
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-blue-900/20 rounded-md p-3 border border-blue-900/30">
        <div className="flex">
          <Info size={16} className="text-blue-400 mt-0.5 mr-2 flex-shrink-0" />
          <div className="text-xs text-blue-300">
            The Sniper Bot scans for newly listed tokens across major launchpads and DEXs. Each token is analyzed using our quality scoring algorithm, which evaluates liquidity, developer reputation, contract safety, and other factors. Only tokens meeting your quality threshold will trigger purchases, helping you find promising new projects while minimizing risk.
          </div>
        </div>
      </div>
    </div>
  );
};

// Bump Bot Content Component
const BumpBotContent = ({ isRunning }) => {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-4 gap-4">
        <BotSettingsCard
          title="Priority Fee"
          value="0.0001 SOL"
          description="Base priority fee amount"
          icon={<Zap />}
          color="cyan"
        />
        <BotSettingsCard
          title="Max Retries"
          value="3"
          description="Transaction retry attempts"
          icon={<RefreshCw />}
          color="cyan"
        />
        <BotSettingsCard
          title="Dynamic Fees"
          value="Enabled"
          description="Adjusts based on congestion"
          icon={<Sliders />}
          color="cyan"
        />
        <BotSettingsCard
          title="Bundling"
          value="Jito MEV"
          description="Anti-frontrunning protection"
          icon={<Shield />}
          color="cyan"
        />
      </div>
      
      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 bg-zinc-900/50 rounded-lg p-4 border border-cyan-900/20">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-medium">Network Congestion</h3>
            <div className="px-2 py-0.5 bg-yellow-900/30 text-yellow-300 text-xs rounded flex items-center">
              <AlertTriangle size={12} className="mr-1" />
              Medium Congestion
            </div>
          </div>
          
          <div className="h-64 relative">
            {/* Network congestion visualization */}
            <div className="absolute inset-0">
              {/* Background grid lines */}
              <div className="absolute inset-0 flex flex-col justify-between">
                <div className="w-full h-px bg-zinc-800"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800/70"></div>
                <div className="w-full h-px bg-zinc-800"></div>
              </div>
              
              {/* TPS line */}
              <svg className="absolute inset-0">
                <defs>
                  <linearGradient id="congestionGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" stopColor="#22D3EE" />
                    <stop offset="100%" stopColor="#3B82F6" />
                  </linearGradient>
                </defs>
                <path
                  d="M0,140 C30,120 60,160 90,150 C120,140 150,80 180,100 C210,120 240,140 270,120 C300,100 330,80 360,100 C390,120 420,180 450,150 C480,120 510,110 540,130"
                  fill="none"
                  stroke="url(#congestionGradient)"
                  strokeWidth="2"
                />
              </svg>
              
              {/* Current indicator */}
              <div className="absolute top-[100px] right-[130px] w-3 h-3 rounded-full bg-cyan-500 shadow-[0_0_10px_rgba(34,211,238,0.7)]"></div>
              
              {/* Label */}
              <div className="absolute top-[100px] right-[130px] -mt-8 px-2 py-1 bg-cyan-900/80 text-cyan-300 text-xs rounded">
                2,850 TPS
              </div>
              
              {/* Congestion zones */}
              <div className="absolute left-0 right-0 top-0 h-1/3 border-b border-dashed border-red-500/30"></div>
              <div className="absolute left-0 right-0 top-1/3 h-1/3 border-b border-dashed border-yellow-500/30"></div>
              
              {/* Zone labels */}
              <div className="absolute right-0 top-[16.7%] px-2 py-0.5 bg-red-900/50 text-red-300 text-xs rounded-l">
                High Congestion
              </div>
              <div className="absolute right-0 top-[50%] px-2 py-0.5 bg-yellow-900/50 text-yellow-300 text-xs rounded-l">
                Medium Congestion
              </div>
              <div className="absolute right-0 top-[83.3%] px-2 py-0.5 bg-green-900/50 text-green-300 text-xs rounded-l">
                Low Congestion
              </div>
              
              {/* Time axis */}
              <div className="absolute left-0 right-0 bottom-0 border-t border-zinc-800 pt-1 flex justify-between px-2">
                <div className="text-xs text-zinc-500">12:00</div>
                <div className="text-xs text-zinc-500">13:00</div>
                <div className="text-xs text-zinc-500">14:00</div>
                <div className="text-xs text-zinc-500">Now</div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="bg-zinc-900/50 rounded-lg p-4 border border-cyan-900/20">
          <h3 className="text-white font-medium mb-4">Bot Activity</h3>
          
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {isRunning ? (
              <>
                <ActivityLogItem
                  time="14:32:05"
                  message="Transaction successful: 0x8f7...2e1"
                  type="success"
                />
                <ActivityLogItem
                  time="14:32:03"
                  message="Increasing priority fee to 0.00015 SOL"
                  type="info"
                />
                <ActivityLogItem
                  time="14:32:01"
                  message="Transaction pending..."
                  type="normal"
                />
                <ActivityLogItem
                  time="14:31:58"
                  message="High congestion detected. Adjusting fees."
                  type="warning"
                />
                <ActivityLogItem
                  time="14:31:55"
                  message="Processing transaction: 0x8f7...2e1"
                  type="info"
                />
              </>
            ) : (
              <div className="flex flex-col items-center justify-center h-28 text-zinc-500">
                <Server size={24} className="mb-2 opacity-50" />
                <p className="text-sm">Bot is currently inactive</p>
                <p className="text-xs mt-1">Start the bot to see activity</p>
              </div>
            )}
          </div>
          
          {isRunning && (
            <div className="mt-4 pt-3 border-t border-zinc-800">
              <div className="flex items-center justify-between">
                <div className="w-1/2">
                  <div className="text-xs text-zinc-400">Success Rate</div>
                  <div className="text-lg font-medium text-white">98.2%</div>
                </div>
                <div className="w-1/2">
                  <div className="text-xs text-zinc-400">Avg. Confirmation</div>
                  <div className="text-lg font-medium text-white">1.2s</div>
                </div>
              </div>
              
              <div className="mt-3 pt-3 border-t border-zinc-800">
                <div className="flex justify-between">
                  <div className="text-xs text-zinc-400">Current Priority Fee</div>
                  <div className="text-xs text-cyan-300">0.00015 SOL</div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="bg-cyan-900/20 rounded-md p-3 border border-cyan-900/30">
        <div className="flex">
          <Info size={16} className="text-cyan-400 mt-0.5 mr-2 flex-shrink-0" />
          <div className="text-xs text-cyan-300">
            The Bump Bot optimizes transaction execution by monitoring network congestion and dynamically adjusting priority fees. It uses Jito MEV protection to prevent front-running and ensure your transactions are processed as efficiently as possible. This is especially useful during high network congestion or when trading highly competitive tokens.
          </div>
        </div>
      </div>
    </div>
  );
};

// Bot Settings Card Component
const BotSettingsCard = ({ title, value, description, icon, color }) => {
  let gradientColors, textColor;
  
  switch (color) {
    case 'purple':
      gradientColors = 'from-purple-500 to-fuchsia-500';
      textColor = 'text-purple-300';
      break;
    case 'pink':
      gradientColors = 'from-pink-500 to-rose-500';
      textColor = 'text-pink-300';
      break;
    case 'blue':
      gradientColors = 'from-blue-500 to-cyan-500';
      textColor = 'text-blue-300';
      break;
    case 'cyan':
      gradientColors = 'from-cyan-500 to-blue-500';
      textColor = 'text-cyan-300';
      break;
    default:
      gradientColors = 'from-purple-500 to-fuchsia-500';
      textColor = 'text-purple-300';
  }

  return (
    <div className="bg-zinc-900/70 rounded-lg border border-zinc-800/50 p-4">
      <div className="flex items-center justify-between mb-2">
        <div className={textColor}>
          <div className="text-sm">{title}</div>
        </div>
        <div className={`w-8 h-8 rounded-lg bg-gradient-to-r ${gradientColors} flex items-center justify-center shadow-[0_0_10px_rgba(168,85,247,0.3)]`}>
          {React.cloneElement(icon, { size: 16 })}
        </div>
      </div>
      <div className="text-xl font-bold text-white">{value}</div>
      <div className="text-xs text-zinc-400 mt-1">{description}</div>
    </div>
  );
};

// Activity Log Item Component
const ActivityLogItem = ({ time, message, type }) => {
  let bgColor, iconColor, icon;
  
  switch (type) {
    case 'info':
      bgColor = 'bg-blue-900/20';
      iconColor = 'text-blue-400';
      icon = <Info size={14} />;
      break;
    case 'success':
      bgColor = 'bg-green-900/20';
      iconColor = 'text-green-400';
      icon = <Check size={14} />;
      break;
    case 'warning':
      bgColor = 'bg-yellow-900/20';
      iconColor = 'text-yellow-400';
      icon = <AlertTriangle size={14} />;
      break;
    case 'error':
      bgColor = 'bg-red-900/20';
      iconColor = 'text-red-400';
      icon = <X size={14} />;
      break;
    case 'normal':
    default:
      bgColor = 'bg-zinc-900';
      iconColor = 'text-zinc-400';
      icon = <Clock size={14} />;
  }

  return (
    <div className={`p-2 rounded ${bgColor} flex items-start`}>
      <div className={`mr-2 mt-0.5 ${iconColor}`}>
        {icon}
      </div>
      <div className="flex-1">
        <div className="flex items-center justify-between">
          <div className="text-sm text-white">{message}</div>
          <div className="text-xs text-zinc-500">{time}</div>
        </div>
      </div>
    </div>
  );
};

// Volume Bar Component for Volume Bot visualization
const VolumeBar = ({ height, color, label }) => {
  let barColors, glow;
  
  switch (color) {
    case 'spike':
      barColors = 'bg-gradient-to-t from-purple-500 to-fuchsia-500';
      glow = 'shadow-[0_0_10px_rgba(168,85,247,0.5)]';
      break;
    default:
      barColors = 'bg-purple-900/60';
      glow = '';
  }

  return (
    <div className="flex flex-col items-center">
      <div className="relative w-6">
        <div 
          className={`w-6 ${barColors} rounded-t ${glow}`} 
          style={{ height }}
        ></div>
        {label && (
          <div className="absolute -top-6 left-1/2 transform -translate-x-1/2 px-1.5 py-0.5 bg-purple-900/80 text-purple-300 text-xs rounded whitespace-nowrap">
            {label}
          </div>
        )}
      </div>
    </div>
  );
};

// Token Listing Row for Sniper Bot
const TokenListingRow = ({ name, symbol, score, time, status, initialPrice }) => {
  let statusBg, statusText, statusIcon;
  
  switch (status) {
    case 'purchased':
      statusBg = 'bg-green-900/30';
      statusText = 'text-green-400';
      statusIcon = <Check size={12} className="mr-1" />;
      break;
    case 'rejected':
      statusBg = 'bg-red-900/30';
      statusText = 'text-red-400';
      statusIcon = <X size={12} className="mr-1" />;
      break;
    default:
      statusBg = 'bg-zinc-800';
      statusText = 'text-zinc-400';
      statusIcon = <Clock size={12} className="mr-1" />;
  }

  let scoreColor;
  if (score >= 70) {
    scoreColor = 'text-green-400';
  } else if (score >= 50) {
    scoreColor = 'text-yellow-400';
  } else {
    scoreColor = 'text-red-400';
  }

  return (
    <div className="p-3 bg-zinc-900/70 rounded-lg border border-zinc-800/50 flex items-center justify-between">
      <div className="flex items-center">
        <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center mr-3 shadow-[0_0_5px_rgba(59,130,246,0.5)]">
          {symbol.charAt(0)}
        </div>
        <div>
          <div className="text-sm font-medium text-white">{name}</div>
          <div className="text-xs text-zinc-400">{symbol}</div>
        </div>
      </div>
      
      <div className="text-center">
        <div className={`text-sm font-medium ${scoreColor}`}>{score}%</div>
        <div className="text-xs text-zinc-400">Quality</div>
      </div>
      
      <div className="text-right">
        <div className="text-sm text-white">{initialPrice}</div>
        <div className="text-xs text-zinc-400">Initial Price</div>
      </div>
      
      <div className="flex flex-col items-end">
        <div className={`flex items-center px-2 py-0.5 rounded text-xs ${statusBg} ${statusText}`}>
          {statusIcon}
          {status === 'purchased' ? 'Purchased' : status === 'rejected' ? 'Rejected' : 'Pending'}
        </div>
        <div className="text-xs text-zinc-500 mt-1">{time}</div>
      </div>
    </div>
  );
};

export default TradingBotsTab;