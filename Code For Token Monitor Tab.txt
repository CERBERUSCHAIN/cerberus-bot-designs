import React, { useState } from 'react';
import { 
  Eye, RefreshCw, Search, PlusCircle, Trash2, 
  Bell, BellOff, Settings, TrendingUp, TrendingDown, 
  BarChart2, LineChart, AlertTriangle, Clock, Check,
  ExternalLink, Zap, ArrowUpDown, DollarSign, Shield
} from 'lucide-react';

const TokenMonitorTab = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedToken, setSelectedToken] = useState(null);
  
  // Dummy tokens data
  const tokens = [
    { 
      id: 1,
      name: 'CERBERUS', 
      symbol: 'CBRS', 
      price: '$0.000125',
      change: '+5.2%',
      volume: '$125,367',
      marketCap: '$1.25M',
      isPositive: true,
      address: '0xc8F5Cdb6F25D59B10B1c6122a9e033f94F031746',
      alerts: ['price-up', 'volume-spike'],
      isWatched: true
    },
    { 
      id: 2,
      name: 'Jupiter', 
      symbol: 'JUP', 
      price: '$7.89',
      change: '-1.4%',
      volume: '$87.5M',
      marketCap: '$1.1B',
      isPositive: false,
      address: '0xF5A3CCE45B3414Cb4F5E6600B2ffA1B7FF318BDa',
      alerts: ['price-down'],
      isWatched: true
    },
    { 
      id: 3,
      name: 'Raydium', 
      symbol: 'RAY', 
      price: '$3.45',
      change: '+8.7%',
      volume: '$12.7M',
      marketCap: '$320M',
      isPositive: true,
      address: '0x3bFc9271B2B2537A889B39E9a2D3786919DF7d81',
      alerts: [],
      isWatched: true
    },
    { 
      id: 4,
      name: 'Solana', 
      symbol: 'SOL', 
      price: '$152.34',
      change: '+2.3%',
      volume: '$2.1B',
      marketCap: '$65.2B',
      isPositive: true,
      address: '0x7dF71fe82B71de988301D10e318F37152d95781c',
      alerts: [],
      isWatched: false
    },
    { 
      id: 5,
      name: 'Bonk', 
      symbol: 'BONK', 
      price: '$0.00003',
      change: '+6.2%',
      volume: '$45.3M',
      marketCap: '$780M',
      isPositive: true,
      address: '0x9e62532DF220f4449AF76f1982D4b3534a3Ab5B4',
      alerts: ['whale-movement'],
      isWatched: true
    }
  ];
  
  const handleTokenSelect = (token) => {
    setSelectedToken(token);
  };
  
  const filteredTokens = searchQuery
    ? tokens.filter(token => 
        token.name.toLowerCase().includes(searchQuery.toLowerCase()) || 
        token.symbol.toLowerCase().includes(searchQuery.toLowerCase()) ||
        token.address.toLowerCase().includes(searchQuery.toLowerCase())
      )
    : tokens;
  
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-white">Token Monitor</h1>
        <div className="flex space-x-2">
          <button className="flex items-center px-3 py-1.5 bg-zinc-900 rounded border border-zinc-800 text-zinc-300 text-sm">
            <RefreshCw size={14} className="mr-2" />
            Refresh Data
          </button>
          <button className="flex items-center px-3 py-1.5 bg-gradient-to-r from-purple-600 to-pink-600 rounded text-white text-sm shadow-[0_0_10px_rgba(168,85,247,0.5)]">
            <PlusCircle size={14} className="mr-2" />
            Add Token
          </button>
        </div>
      </div>
      
      {/* Search and token list header */}
      <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
        <div className="border-b border-purple-900/30 p-4">
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search size={16} className="text-zinc-500" />
            </div>
            <input
              type="text"
              placeholder="Search by name, symbol, or address..."
              className="w-full bg-zinc-900 border border-zinc-800 rounded-md py-2 pl-10 pr-4 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        
        {/* Token list */}
        <div className="overflow-auto max-h-96">
          <table className="min-w-full divide-y divide-zinc-800/50">
            <thead className="bg-zinc-900/50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider">
                  Token
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider">
                  Price
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider">
                  24h Change
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider">
                  Volume
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-300 uppercase tracking-wider">
                  Market Cap
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-purple-300 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-zinc-800/30">
              {filteredTokens.map((token) => (
                <tr 
                  key={token.id} 
                  className={`hover:bg-zinc-900/50 cursor-pointer ${selectedToken?.id === token.id ? 'bg-zinc-900/70' : ''}`}
                  onClick={() => handleTokenSelect(token)}
                >
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center mr-3 shadow-[0_0_5px_rgba(168,85,247,0.5)]">
                        {token.symbol.charAt(0)}
                      </div>
                      <div>
                        <div className="text-sm font-medium text-white">{token.name}</div>
                        <div className="text-xs text-zinc-400">{token.symbol}</div>
                      </div>
                      {token.alerts.length > 0 && (
                        <div className="ml-2 flex">
                          {token.alerts.includes('price-up') && (
                            <div className="w-2 h-2 rounded-full bg-green-500 shadow-[0_0_5px_rgba(16,185,129,0.7)] ml-1"></div>
                          )}
                          {token.alerts.includes('price-down') && (
                            <div className="w-2 h-2 rounded-full bg-red-500 shadow-[0_0_5px_rgba(239,68,68,0.7)] ml-1"></div>
                          )}
                          {token.alerts.includes('volume-spike') && (
                            <div className="w-2 h-2 rounded-full bg-blue-500 shadow-[0_0_5px_rgba(59,130,246,0.7)] ml-1"></div>
                          )}
                          {token.alerts.includes('whale-movement') && (
                            <div className="w-2 h-2 rounded-full bg-purple-500 shadow-[0_0_5px_rgba(168,85,247,0.7)] ml-1"></div>
                          )}
                        </div>
                      )}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-white">{token.price}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className={`text-sm flex items-center ${token.isPositive ? 'text-green-400' : 'text-red-400'}`}>
                      {token.isPositive ? <TrendingUp size={14} className="mr-1" /> : <TrendingDown size={14} className="mr-1" />}
                      {token.change}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-zinc-300">{token.volume}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-zinc-300">{token.marketCap}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex justify-end space-x-1">
                      <button className="p-1.5 rounded bg-zinc-900 text-zinc-300 hover:bg-zinc-800">
                        {token.isWatched ? <Bell size={14} className="text-purple-400" /> : <BellOff size={14} />}
                      </button>
                      <button className="p-1.5 rounded bg-zinc-900 text-zinc-300 hover:bg-zinc-800">
                        <LineChart size={14} />
                      </button>
                      <button className="p-1.5 rounded bg-red-900/20 text-red-400 hover:bg-red-900/30">
                        <Trash2 size={14} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
      
      {/* Token detail view (shown when a token is selected) */}
      {selectedToken && (
        <div className="grid grid-cols-3 gap-6">
          {/* Left panel - Token info and chart */}
          <div className="col-span-2 space-y-6">
            <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
              <div className="border-b border-purple-900/30 p-4 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="w-8 h-8 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center mr-3 shadow-[0_0_10px_rgba(168,85,247,0.5)]">
                    {selectedToken.symbol.charAt(0)}
                  </div>
                  <div>
                    <h2 className="text-lg font-medium text-white">{selectedToken.name} ({selectedToken.symbol})</h2>
                    <div className="text-xs text-zinc-400 flex items-center">
                      <span className="truncate max-w-xs">{selectedToken.address}</span>
                      <button className="ml-1 text-zinc-500 hover:text-zinc-300">
                        <ExternalLink size={12} />
                      </button>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button className="flex items-center px-3 py-1.5 bg-purple-900/20 rounded border border-purple-900/30 text-purple-300 text-sm">
                    <Settings size={14} className="mr-2" />
                    Configure Alerts
                  </button>
                  <button className="flex items-center px-3 py-1.5 bg-pink-900/20 rounded border border-pink-900/30 text-pink-300 text-sm">
                    <ArrowUpDown size={14} className="mr-2" />
                    Trade
                  </button>
                </div>
              </div>
              <div className="p-4">
                <div className="grid grid-cols-4 gap-4 mb-6">
                  <TokenStatCard
                    title="Current Price"
                    value={selectedToken.price}
                    icon={<DollarSign size={16} />}
                    color="purple"
                    change={selectedToken.change}
                    isPositive={selectedToken.isPositive}
                  />
                  <TokenStatCard
                    title="24h Volume"
                    value={selectedToken.volume}
                    icon={<BarChart2 size={16} />}
                    color="pink"
                  />
                  <TokenStatCard
                    title="Market Cap"
                    value={selectedToken.marketCap}
                    icon={<DollarSign size={16} />}
                    color="blue"
                  />
                  <TokenStatCard
                    title="Monitoring"
                    value={selectedToken.alerts.length > 0 ? `${selectedToken.alerts.length} Alerts` : "No Alerts"}
                    icon={<Bell size={16} />}
                    color="cyan"
                  />
                </div>
                
                {/* Chart area */}
                <div className="border border-zinc-800/50 rounded-lg p-4 h-64 bg-black/50 flex items-center justify-center">
                  {selectedToken.name === 'CERBERUS' ? (
                    <div className="relative w-full h-full">
                      <div className="text-zinc-700 text-xs absolute top-2 left-4">Price Chart: {selectedToken.symbol}</div>
                      
                      {/* Simple price visualization */}
                      <div className="absolute inset-0 flex items-end px-4 pb-8">
                        <div className="w-full h-full relative">
                          {/* Background grid lines */}
                          <div className="absolute bottom-0 w-full h-px bg-zinc-800"></div>
                          <div className="absolute bottom-1/4 w-full h-px bg-zinc-800/50"></div>
                          <div className="absolute bottom-2/4 w-full h-px bg-zinc-800/50"></div>
                          <div className="absolute bottom-3/4 w-full h-px bg-zinc-800/50"></div>
                          
                          {/* Simple area chart effect with gradient */}
                          <div className="absolute bottom-0 left-0 right-0 h-2/3 bg-gradient-to-t from-purple-500/10 to-transparent rounded-md"></div>
                          
                          {/* Line effect */}
                          <svg className="absolute inset-0">
                            <path
                              d="M0,80 C30,100 60,50 90,60 C120,70 150,20 180,40 C210,60 240,80 270,75 C300,70 330,50 360,45 C390,40 420,60 450,70 C480,80 510,75 540,60 C570,45 600,80 630,70"
                              fill="none"
                              stroke="url(#purpleGradient)"
                              strokeWidth="2"
                            />
                            <defs>
                              <linearGradient id="purpleGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                                <stop offset="0%" stopColor="#8B5CF6" />
                                <stop offset="100%" stopColor="#EC4899" />
                              </linearGradient>
                            </defs>
                          </svg>
                          
                          {/* Price points with glow effect */}
                          <div className="absolute bottom-[60px] left-[90px] w-2 h-2 rounded-full bg-purple-500 shadow-[0_0_5px_rgba(168,85,247,0.7)]"></div>
                          <div className="absolute bottom-[40px] left-[180px] w-2 h-2 rounded-full bg-purple-500 shadow-[0_0_5px_rgba(168,85,247,0.7)]"></div>
                          <div className="absolute bottom-[45px] left-[360px] w-2 h-2 rounded-full bg-pink-500 shadow-[0_0_5px_rgba(236,72,153,0.7)]"></div>
                          <div className="absolute bottom-[70px] left-[450px] w-2 h-2 rounded-full bg-pink-500 shadow-[0_0_5px_rgba(236,72,153,0.7)]"></div>
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="text-zinc-700 text-sm">Select CBRS token to view detailed chart</div>
                  )}
                </div>
              </div>
            </div>
            
            {/* Alert History */}
            <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
              <div className="border-b border-purple-900/30 p-4">
                <h2 className="text-lg font-medium text-white">Alert History</h2>
              </div>
              <div className="p-4">
                {selectedToken.alerts.length > 0 ? (
                  <div className="space-y-3">
                    {selectedToken.alerts.includes('price-up') && (
                      <AlertItem 
                        type="Price Increase"
                        message={`${selectedToken.symbol} price increased by ${selectedToken.change} in the last 24 hours`}
                        time="15 minutes ago"
                        status="positive"
                      />
                    )}
                    {selectedToken.alerts.includes('price-down') && (
                      <AlertItem 
                        type="Price Decrease"
                        message={`${selectedToken.symbol} price decreased by ${selectedToken.change.replace('-', '')} in the last 24 hours`}
                        time="35 minutes ago"
                        status="negative"
                      />
                    )}
                    {selectedToken.alerts.includes('volume-spike') && (
                      <AlertItem 
                        type="Volume Spike"
                        message={`Unusual trading volume detected for ${selectedToken.symbol}`}
                        time="2 hours ago"
                        status="info"
                      />
                    )}
                    {selectedToken.alerts.includes('whale-movement') && (
                      <AlertItem 
                        type="Whale Movement"
                        message={`Large holder moved 1,500,000 ${selectedToken.symbol} tokens`}
                        time="4 hours ago"
                        status="warning"
                      />
                    )}
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center py-8 text-zinc-500">
                    <Bell size={32} className="mb-2 opacity-50" />
                    <p className="text-sm">No recent alerts for {selectedToken.symbol}</p>
                    <button className="mt-3 px-3 py-1.5 bg-purple-900/20 rounded border border-purple-900/30 text-purple-300 text-xs">
                      Configure Alerts
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Right panel - Quick actions and monitors */}
          <div className="space-y-6">
            {/* Quick Actions */}
            <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
              <div className="border-b border-purple-900/30 p-4">
                <h2 className="text-lg font-medium text-white">Quick Actions</h2>
              </div>
              <div className="p-4">
                <div className="grid grid-cols-1 gap-3">
                  <ActionButton 
                    icon={<ArrowUpDown size={16} />}
                    text="Quick Buy"
                    subtext={`Buy ${selectedToken.symbol}`}
                    color="from-green-600 to-emerald-600"
                  />
                  <ActionButton 
                    icon={<ArrowUpDown size={16} />}
                    text="Quick Sell"
                    subtext={`Sell ${selectedToken.symbol}`}
                    color="from-blue-600 to-cyan-600"
                  />
                  <ActionButton 
                    icon={<Zap size={16} />}
                    text="Volume Bot"
                    subtext="Set up automated trading"
                    color="from-purple-600 to-fuchsia-600"
                  />
                  <ActionButton 
                    icon={<Shield size={16} />}
                    text="Set Alerts"
                    subtext="Price and volume alerts"
                    color="from-pink-600 to-rose-600"
                  />
                </div>
              </div>
            </div>
            
            {/* Alert Settings */}
            <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
              <div className="border-b border-purple-900/30 p-4">
                <h2 className="text-lg font-medium text-white">Alert Settings</h2>
              </div>
              <div className="p-4">
                <div className="space-y-4">
                  <AlertSetting 
                    title="Price Change"
                    description="Alert when price changes significantly"
                    enabled={true}
                  />
                  <AlertSetting 
                    title="Volume Spike"
                    description="Alert on unusual trading volume"
                    enabled={true}
                  />
                  <AlertSetting 
                    title="Whale Movement"
                    description="Alert on large holder transactions"
                    enabled={selectedToken.symbol === 'BONK'}
                  />
                  <AlertSetting 
                    title="New Listings"
                    description="Alert when token is listed on new exchanges"
                    enabled={false}
                  />
                </div>
                
                <div className="mt-4 pt-4 border-t border-zinc-800/50">
                  <button className="w-full px-3 py-2 bg-gradient-to-r from-purple-600 to-pink-600 rounded text-white text-sm shadow-[0_0_10px_rgba(168,85,247,0.5)] hover:shadow-[0_0_15px_rgba(168,85,247,0.7)] transition-shadow">
                    Save Alert Settings
                  </button>
                </div>
              </div>
            </div>
            
            {/* Recent Activity */}
            <div className="bg-zinc-950 rounded-lg border border-purple-900/30 shadow-[0_0_20px_-5px_rgba(168,85,247,0.25)] overflow-hidden">
              <div className="border-b border-purple-900/30 p-4">
                <h2 className="text-lg font-medium text-white">Recent Activity</h2>
              </div>
              <div className="p-4">
                <div className="space-y-2">
                  <ActivityItem 
                    action="Added to watchlist"
                    target={selectedToken.symbol}
                    time="2 days ago"
                  />
                  <ActivityItem 
                    action="Updated alert settings"
                    target={selectedToken.symbol}
                    time="3 days ago"
                  />
                  <ActivityItem 
                    action="Bought"
                    target={`1,000 ${selectedToken.symbol}`}
                    time="5 days ago"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

// Token Stat Card Component
const TokenStatCard = ({ title, value, icon, color, change, isPositive }) => {
  let gradientColors, textColor, borderColor, shadowColor;
  
  switch (color) {
    case 'purple':
      gradientColors = 'from-purple-500 to-fuchsia-500';
      textColor = 'text-purple-300';
      borderColor = 'border-purple-900/30';
      shadowColor = 'rgba(168,85,247,0.25)';
      break;
    case 'pink':
      gradientColors = 'from-pink-500 to-rose-500';
      textColor = 'text-pink-300';
      borderColor = 'border-pink-900/30';
      shadowColor = 'rgba(236,72,153,0.25)';
      break;
    case 'blue':
      gradientColors = 'from-blue-500 to-cyan-500';
      textColor = 'text-blue-300';
      borderColor = 'border-blue-900/30';
      shadowColor = 'rgba(59,130,246,0.25)';
      break;
    case 'cyan':
      gradientColors = 'from-cyan-500 to-blue-500';
      textColor = 'text-cyan-300';
      borderColor = 'border-cyan-900/30';
      shadowColor = 'rgba(6,182,212,0.25)';
      break;
    default:
      gradientColors = 'from-purple-500 to-fuchsia-500';
      textColor = 'text-purple-300';
      borderColor = 'border-purple-900/30';
      shadowColor = 'rgba(168,85,247,0.25)';
  }

  return (
    <div className={`bg-zinc-900/70 rounded-lg border ${borderColor} p-4 shadow-[0_0_15px_-5px_${shadowColor}]`}>
      <div className="flex items-center justify-between mb-2">
        <div className={`${textColor} text-sm`}>{title}</div>
        <div className={`w-8 h-8 rounded-lg bg-gradient-to-r ${gradientColors} flex items-center justify-center shadow-[0_0_10px_rgba(168,85,247,0.3)]`}>
          {icon}
        </div>
      </div>
      <div className="text-lg font-bold text-white">{value}</div>
      {change && (
        <div className={`text-xs ${isPositive ? 'text-green-400' : 'text-red-400'} mt-1 flex items-center`}>
          {isPositive ? <TrendingUp size={12} className="mr-1" /> : <TrendingDown size={12} className="mr-1" />}
          {change}
        </div>
      )}
    </div>
  );
};

// Alert Item Component
const AlertItem = ({ type, message, time, status }) => {
  let bgColor, textColor, iconColor, icon;
  
  switch (status) {
    case 'positive':
      bgColor = 'bg-green-900/20';
      textColor = 'text-green-300';
      iconColor = 'text-green-400';
      icon = <TrendingUp size={16} />;
      break;
    case 'negative':
      bgColor = 'bg-red-900/20';
      textColor = 'text-red-300';
      iconColor = 'text-red-400';
      icon = <TrendingDown size={16} />;
      break;
    case 'warning':
      bgColor = 'bg-yellow-900/20';
      textColor = 'text-yellow-300';
      iconColor = 'text-yellow-400';
      icon = <AlertTriangle size={16} />;
      break;
    case 'info':
    default:
      bgColor = 'bg-blue-900/20';
      textColor = 'text-blue-300';
      iconColor = 'text-blue-400';
      icon = <BarChart2 size={16} />;
  }

  return (
    <div className={`p-3 rounded ${bgColor} border border-${status === 'positive' ? 'green' : status === 'negative' ? 'red' : status === 'warning' ? 'yellow' : 'blue'}-900/30`}>
      <div className="flex">
        <div className={`mr-3 mt-0.5 ${iconColor}`}>
          {icon}
        </div>
        <div className="flex-1">
          <div className="flex justify-between">
            <div className="text-sm font-medium text-white">{type}</div>
            <div className="text-xs text-zinc-500">{time}</div>
          </div>
          <div className={`text-xs ${textColor} mt-1`}>{message}</div>
        </div>
      </div>
    </div>
  );
};

// Action Button Component
const ActionButton = ({ icon, text, subtext, color }) => {
  return (
    <button className={`flex items-center p-3 bg-gradient-to-r ${color} rounded-md shadow-[0_0_10px_rgba(168,85,247,0.25)] hover:shadow-[0_0_15px_rgba(168,85,247,0.4)] transition-shadow`}>
      <div className="w-10 h-10 rounded-full bg-white/10 flex items-center justify-center mr-3">
        {icon}
      </div>
      <div className="text-left">
        <div className="text-sm font-medium text-white">{text}</div>
        <div className="text-xs text-white/70">{subtext}</div>
      </div>
      <ExternalLink size={14} className="ml-auto text-white/70" />
    </button>
  );
};

// Alert Setting Component
const AlertSetting = ({ title, description, enabled }) => {
  return (
    <div className="flex items-center justify-between">
      <div>
        <div className="text-sm font-medium text-white">{title}</div>
        <div className="text-xs text-zinc-400">{description}</div>
      </div>
      <div className="relative inline-block w-12 align-middle select-none">
        <input
          type="checkbox"
          name={`alert-${title}`}
          id={`alert-${title}`}
          className="sr-only"
          defaultChecked={enabled}
        />
        <div className="block h-6 w-12 rounded-full bg-zinc-700"></div>
        <div className={`absolute left-0.5 top-0.5 h-5 w-5 rounded-full transition-transform duration-200 ease-in-out ${
          enabled 
            ? 'transform translate-x-6 bg-gradient-to-r from-purple-500 to-pink-500 shadow-[0_0_5px_rgba(168,85,247,0.7)]' 
            : 'bg-zinc-400'
        }`}></div>
      </div>
    </div>
  );
};

// Activity Item Component
const ActivityItem = ({ action, target, time }) => {
  return (
    <div className="flex items-center justify-between py-2 border-b border-zinc-800/30 last:border-0">
      <div>
        <div className="text-sm text-white">{action} <span className="text-purple-300">{target}</span></div>
      </div>
      <div className="text-xs text-zinc-500 flex items-center">
        <Clock size={10} className="mr-1" />
        {time}
      </div>
    </div>
  );
};

export default TokenMonitorTab;